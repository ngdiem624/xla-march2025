
#Cell 4: ƒê·ªãnh Nghƒ©a H√†m save_camera_parameters


def save_camera_parameters(ret, camera_matrix, distortion_coefficients, camera_label):
    if ret:
        # T·∫°o t√™n file ri√™ng d·ª±a tr√™n camera_label ƒë·ªÉ tr√°nh ghi ƒë√®
        np.save(f"camera_matrix_{camera_label}.npy", camera_matrix)
        np.save(f"distortion_coefficients_{camera_label}.npy", distortion_coefficients)

        print(f"‚úÖ Hi·ªáu ch·ªânh camera {camera_label} th√†nh c√¥ng!")
        print(f"üìå Camera Matrix {camera_label}:\n", camera_matrix)
        print(f"üìå Distortion Coefficients {camera_label}:\n", distortion_coefficients)
    else:
        print(f"‚ùå Hi·ªáu ch·ªânh camera {camera_label} th·∫•t b·∫°i! Ki·ªÉm tra l·∫°i ·∫£nh ƒë·∫ßu v√†o.")




#Cell 5: Hi·ªáu Ch·ªânh Camera Tr√°i v√† Ph·∫£i (Calibration C√° Nh√¢n)



chessboard_size = (8, 5)  # S·ªë √¥ - 1 tr√™n b·∫£ng checkerboard
# K√≠ch th∆∞·ªõc th·ª±c t·∫ø c·ªßa m·ªói √¥ vu√¥ng (mm)
square_size = 32
left_path = r"D:/left/*.jpg"
right_path = r"D:/right/*.jpg"


# Hi·ªáu ch·ªânh camera tr√°i
K1, D1, ret1 = calibrate_camera(left_path, chessboard_size, square_size)
print("Ma tr·∫≠n n·ªôi t·∫°i c·ªßa Camera Tr√°i (K1):\n", K1)
print("H·ªá s·ªë m√©o c·ªßa Camera Tr√°i (D1):\n", D1)

# L∆∞u th√¥ng s·ªë camera tr√°i
save_camera_parameters(ret1, K1, D1, "left")

# Hi·ªáu ch·ªânh camera ph·∫£i
K2, D2, ret2 = calibrate_camera(right_path, chessboard_size, square_size)
print("Ma tr·∫≠n n·ªôi t·∫°i c·ªßa Camera Ph·∫£i (K2):\n", K2)
print("H·ªá s·ªë m√©o c·ªßa Camera Ph·∫£i (D2):\n", D2)

# L∆∞u th√¥ng s·ªë camera ph·∫£i
save_camera_parameters(ret2, K2, D2, "right")



#Cell 6: Stereo Calibration (Hi·ªáu Ch·ªânh Stereo)


# Th·ª±c hi·ªán stereo calibration d·ª±a tr√™n c√°c c·∫∑p ·∫£nh ƒë·ªìng th·ªùi c·ªßa 2 camera
ret_stereo, R, T, E, F, newK1, newD1, newK2, newD2 = stereo_calibrate(
    left_path, right_path, chessboard_size, square_size, K1, D1, K2, D2
)

if ret_stereo is not None:
    if ret_stereo:
        print("‚úÖ Stereo calibration th√†nh c√¥ng!")
        print("Ma tr·∫≠n quay (R):\n", R)
        print("Vector d·ªãch chuy·ªÉn (T):\n", T)
        baseline = np.linalg.norm(T)
        print("Baseline (kho·∫£ng c√°ch gi·ªØa 2 camera):", baseline)
    else:
        print("‚ùå Stereo calibration th·∫•t b·∫°i!")
else:
    print("‚ùå Stereo calibration kh√¥ng th·ª±c hi·ªán ƒë∆∞·ª£c do thi·∫øu d·ªØ li·ªáu.")