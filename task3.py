
#Cell 3: ƒê·ªãnh Nghƒ©a H√†m stereo_calibrate



def stereo_calibrate(left_image_pattern, right_image_pattern, chessboard_size, square_size, K1, D1, K2, D2):
    """
    Th·ª±c hi·ªán stereo calibration v·ªõi c√°c c·∫∑p ·∫£nh t·ª´ camera tr√°i v√† ph·∫£i.
    
    Tham s·ªë:
      left_image_pattern, right_image_pattern: m·∫´u ƒë∆∞·ªùng d·∫´n ·∫£nh cho camera tr√°i v√† ph·∫£i.
      chessboard_size: k√≠ch th∆∞·ªõc b√†n caro (s·ªë g√≥c b√™n trong).
      square_size: k√≠ch th∆∞·ªõc th·ª±c t·∫ø c·ªßa m·ªói √¥.
      K1, D1, K2, D2: th√¥ng s·ªë n·ªôi t·∫°i v√† h·ªá s·ªë m√©o c·ªßa 2 camera ƒë√£ hi·ªáu ch·ªânh.
    
    Tr·∫£ v·ªÅ: ret, R, T, E, F, c√πng v·ªõi c√°c th√¥ng s·ªë n·ªôi t·∫°i (n·∫øu c√≥ c·∫≠p nh·∫≠t).
    """
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)
    # T·ªça ƒë·ªô 3D c·ªßa c√°c g√≥c
    objp = np.zeros((chessboard_size[0] * chessboard_size[1], 3), np.float32)
    objp[:, :2] = np.mgrid[0:chessboard_size[0], 0:chessboard_size[1]].T.reshape(-1, 2) * square_size

    objpoints = []       # danh s√°ch ƒëi·ªÉm 3D (chung cho c√°c c·∫∑p ·∫£nh)
    imgpoints_left = []  # danh s√°ch ƒëi·ªÉm 2D t·ª´ camera tr√°i
    imgpoints_right = [] # danh s√°ch ƒëi·ªÉm 2D t·ª´ camera ph·∫£i

    left_images = glob.glob(left_image_pattern)
    right_images = glob.glob(right_image_pattern)
    left_images.sort()
    right_images.sort()

    if len(left_images) == 0 or len(right_images) == 0:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh cho stereo calibration. Ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n!")
        return None, None, None, None, None, None, None, None, None

    print(f"üîç Stereo calibration s·ª≠ d·ª•ng {min(len(left_images), len(right_images))} c·∫∑p ·∫£nh.")

    # Duy·ªát qua c√°c c·∫∑p ·∫£nh
    for left_fname, right_fname in zip(left_images, right_images):
        left_img = cv2.imread(left_fname)
        right_img = cv2.imread(right_fname)
        if left_img is None or right_img is None:
            print(f"‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c c·∫∑p ·∫£nh: {left_fname}, {right_fname}")
            continue
        left_gray = cv2.cvtColor(left_img, cv2.COLOR_BGR2GRAY)
        right_gray = cv2.cvtColor(right_img, cv2.COLOR_BGR2GRAY)

        ret_left, corners_left = cv2.findChessboardCorners(left_gray, chessboard_size, None)
        ret_right, corners_right = cv2.findChessboardCorners(right_gray, chessboard_size, None)

        if ret_left and ret_right:
            objpoints.append(objp)
            imgpoints_left.append(corners_left)
            imgpoints_right.append(corners_right)
            # Hi·ªÉn th·ªã g√≥c t√¨m ƒë∆∞·ª£c (t√πy ch·ªçn)
            cv2.drawChessboardCorners(left_img, chessboard_size, corners_left, ret_left)
            cv2.drawChessboardCorners(right_img, chessboard_size, corners_right, ret_right)
            cv2.imshow("Left", left_img)
            cv2.imshow("Right", right_img)
            cv2.waitKey(500)
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y g√≥c ƒë·ªß trong c·∫∑p ·∫£nh: {left_fname} v√† {right_fname}")
    cv2.destroyAllWindows()

    # Gi·∫£ s·ª≠ k√≠ch th∆∞·ªõc ·∫£nh l·∫•y t·ª´ ·∫£nh tr√°i (ph·∫£i nh·∫•t qu√°n)
    image_size = left_gray.shape[::-1]

    # Th·ª±c hi·ªán stereo calibration (fix intrinsic v√¨ ƒë√£ bi·∫øt K1, D1, K2, D2)
    flags = cv2.CALIB_FIX_INTRINSIC
    ret, newK1, newD1, newK2, newD2, R, T, E, F = cv2.stereoCalibrate(
        objpoints, imgpoints_left, imgpoints_right,
        K1, D1, K2, D2,
        image_size,
        criteria=criteria,
        flags=flags
    )

    return ret, R, T, E, F, newK1, newD1, newK2, newD2